// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/sale/interface.go

// Package mock_sale is a generated GoMock package.
package mock_sale

import (
	entity "StoreManager-DDD/entity"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
)

// MockReader is a mock of Reader interface.
type MockReader struct {
	ctrl     *gomock.Controller
	recorder *MockReaderMockRecorder
}

// MockReaderMockRecorder is the mock recorder for MockReader.
type MockReaderMockRecorder struct {
	mock *MockReader
}

// NewMockReader creates a new mock instance.
func NewMockReader(ctrl *gomock.Controller) *MockReader {
	mock := &MockReader{ctrl: ctrl}
	mock.recorder = &MockReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReader) EXPECT() *MockReaderMockRecorder {
	return m.recorder
}

// GetSale mocks base method.
func (m *MockReader) GetSale(s uuid.UUID) (*entity.Sale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSale", s)
	ret0, _ := ret[0].(*entity.Sale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSale indicates an expected call of GetSale.
func (mr *MockReaderMockRecorder) GetSale(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSale", reflect.TypeOf((*MockReader)(nil).GetSale), s)
}

// GetSalesByUserId mocks base method.
func (m *MockReader) GetSalesByUserId(u uuid.UUID) ([]*entity.Sale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSalesByUserId", u)
	ret0, _ := ret[0].([]*entity.Sale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSalesByUserId indicates an expected call of GetSalesByUserId.
func (mr *MockReaderMockRecorder) GetSalesByUserId(u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSalesByUserId", reflect.TypeOf((*MockReader)(nil).GetSalesByUserId), u)
}

// List mocks base method.
func (m *MockReader) List() ([]*entity.Sale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]*entity.Sale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockReaderMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockReader)(nil).List))
}

// MockWriter is a mock of Writer interface.
type MockWriter struct {
	ctrl     *gomock.Controller
	recorder *MockWriterMockRecorder
}

// MockWriterMockRecorder is the mock recorder for MockWriter.
type MockWriterMockRecorder struct {
	mock *MockWriter
}

// NewMockWriter creates a new mock instance.
func NewMockWriter(ctrl *gomock.Controller) *MockWriter {
	mock := &MockWriter{ctrl: ctrl}
	mock.recorder = &MockWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriter) EXPECT() *MockWriterMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockWriter) Create(s *entity.Sale) (*entity.Sale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", s)
	ret0, _ := ret[0].(*entity.Sale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockWriterMockRecorder) Create(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockWriter)(nil).Create), s)
}

// Delete mocks base method.
func (m *MockWriter) Delete(s uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", s)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockWriterMockRecorder) Delete(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockWriter)(nil).Delete), s)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(s *entity.Sale) (*entity.Sale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", s)
	ret0, _ := ret[0].(*entity.Sale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), s)
}

// Delete mocks base method.
func (m *MockRepository) Delete(s uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", s)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositoryMockRecorder) Delete(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), s)
}

// GetSale mocks base method.
func (m *MockRepository) GetSale(s uuid.UUID) (*entity.Sale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSale", s)
	ret0, _ := ret[0].(*entity.Sale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSale indicates an expected call of GetSale.
func (mr *MockRepositoryMockRecorder) GetSale(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSale", reflect.TypeOf((*MockRepository)(nil).GetSale), s)
}

// GetSalesByUserId mocks base method.
func (m *MockRepository) GetSalesByUserId(u uuid.UUID) ([]*entity.Sale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSalesByUserId", u)
	ret0, _ := ret[0].([]*entity.Sale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSalesByUserId indicates an expected call of GetSalesByUserId.
func (mr *MockRepositoryMockRecorder) GetSalesByUserId(u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSalesByUserId", reflect.TypeOf((*MockRepository)(nil).GetSalesByUserId), u)
}

// List mocks base method.
func (m *MockRepository) List() ([]*entity.Sale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]*entity.Sale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockRepositoryMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRepository)(nil).List))
}

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// CreateSale mocks base method.
func (m *MockUsecase) CreateSale(s *entity.Sale) (*entity.Sale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSale", s)
	ret0, _ := ret[0].(*entity.Sale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSale indicates an expected call of CreateSale.
func (mr *MockUsecaseMockRecorder) CreateSale(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSale", reflect.TypeOf((*MockUsecase)(nil).CreateSale), s)
}

// DeleteSale mocks base method.
func (m *MockUsecase) DeleteSale(s uuid.UUID) (*entity.Sale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSale", s)
	ret0, _ := ret[0].(*entity.Sale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSale indicates an expected call of DeleteSale.
func (mr *MockUsecaseMockRecorder) DeleteSale(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSale", reflect.TypeOf((*MockUsecase)(nil).DeleteSale), s)
}

// GetAllSales mocks base method.
func (m *MockUsecase) GetAllSales() ([]*entity.Sale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSales")
	ret0, _ := ret[0].([]*entity.Sale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSales indicates an expected call of GetAllSales.
func (mr *MockUsecaseMockRecorder) GetAllSales() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSales", reflect.TypeOf((*MockUsecase)(nil).GetAllSales))
}

// GetSale mocks base method.
func (m *MockUsecase) GetSale(s uuid.UUID) (*entity.Sale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSale", s)
	ret0, _ := ret[0].(*entity.Sale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSale indicates an expected call of GetSale.
func (mr *MockUsecaseMockRecorder) GetSale(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSale", reflect.TypeOf((*MockUsecase)(nil).GetSale), s)
}

// GetSalesByProductId mocks base method.
func (m *MockUsecase) GetSalesByProductId(p uuid.UUID) ([]*entity.Sale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSalesByProductId", p)
	ret0, _ := ret[0].([]*entity.Sale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSalesByProductId indicates an expected call of GetSalesByProductId.
func (mr *MockUsecaseMockRecorder) GetSalesByProductId(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSalesByProductId", reflect.TypeOf((*MockUsecase)(nil).GetSalesByProductId), p)
}

// GetSalesByUserId mocks base method.
func (m *MockUsecase) GetSalesByUserId(u uuid.UUID) ([]*entity.Sale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSalesByUserId", u)
	ret0, _ := ret[0].([]*entity.Sale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSalesByUserId indicates an expected call of GetSalesByUserId.
func (mr *MockUsecaseMockRecorder) GetSalesByUserId(u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSalesByUserId", reflect.TypeOf((*MockUsecase)(nil).GetSalesByUserId), u)
}
